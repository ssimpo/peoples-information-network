{
  "keyboard_shortcut": "", 
  "name": "Checkstyle", 
  "language": "JavaScript", 
  "trigger_enabled": false, 
  "value": [
    "if (!org) var org = {};", 
    "if (!org.simpo) org.simpo = {};", 
    "", 
    "org.simpo.dojoCheckStyle = function(){", 
    "\t", 
    "\tconsole = {", 
    "\t\t\"_logger\": Components.classes[\"@mozilla.org/consoleservice;1\"].getService(Components.interfaces.nsIConsoleService),", 
    "\t\t", 
    "\t\tlog: function(){", 
    "\t\t\tfor(var i = 0; i<arguments.length; i++){", 
    "\t\t\t\tvar cArg = arguments[i];", 
    "\t\t\t\t", 
    "\t\t\t\tif(Object.prototype.toString.call(cArg) === '[object Array]'){", 
    "\t\t\t\t\tfor(var ii = 0; i<cArg.length; ii++){", 
    "\t\t\t\t\t\tconsole._logger.logStringMessage(this._convertToString(cArg[ii]));", 
    "\t\t\t\t\t}", 
    "\t\t\t\t}else{", 
    "\t\t\t\t\tconsole._logger.logStringMessage(this._convertToString(arguments[i]));", 
    "\t\t\t\t}", 
    "\t\t\t}", 
    "\t\t},", 
    "\t\t", 
    "\t\t_convertToString: function(value){", 
    "\t\t\tif(Object.prototype.toString.call(value) === '[object Object]'){", 
    "\t\t\t\treturn JSON.stringify(value);", 
    "\t\t\t}else if(Object.prototype.toString.call(value) === '[object Array]'){", 
    "\t\t\t\treturn JSON.stringify(value);", 
    "\t\t\t}", 
    "\t\t\t", 
    "\t\t\treturn value.toString(value);", 
    "\t\t},", 
    "\t\t", 
    "\t\terror: function(){", 
    "\t\t\tfor(var i = 0; i<arguments.length; i++){", 
    "\t\t\t\tconsole._logger.logStringMessage(\"ERROR: \"+arguments[i]);", 
    "\t\t\t}", 
    "\t\t}", 
    "\t}", 
    "\t", 
    "\tfunction run(){", 
    "\t\tvar cFilePath = _getCurrentFilePath();", 
    "\t\tvar result = _checkstyle(cFilePath);", 
    "\t\t", 
    "\t\tif(!result.error){", 
    "\t\t\tvar errors = _parseResult(result.value);", 
    "\t\t\t", 
    "\t\t\tfor(var i = 0; i < errors.length; i++){", 
    "\t\t\t\tconsole.log(errors[i].filename + \" [Line: \"+errors[i].linenumber.toString()+\"] \"+errors[i].message);", 
    "\t\t\t}", 
    "\t\t}", 
    "\t}", 
    "\t", 
    "\tfunction _parseResult(result){", 
    "\t\tvar results = new Array();", 
    "\t\tvar lines = result.split(\"\\n\");", 
    "\t\t", 
    "\t\tfor(var i = 0; i<lines.length; i++){", 
    "\t\t\tvar cLine = lines[i];", 
    "\t\t\tif(/[^\\\\^\\/]*\\.js\\:\\d+ \\- /.test(cLine)){", 
    "\t\t\t\tvar parsed = /([^\\\\^\\/]*\\.js)\\:(\\d+) \\- (.*)/.exec(cLine);", 
    "\t\t\t\tresults.push({", 
    "\t\t\t\t\t\"filename\": parsed[1],", 
    "\t\t\t\t\t\"linenumber\": parseInt(parsed[2], 10),", 
    "\t\t\t\t\t\"message\": parsed[3],", 
    "\t\t\t\t\t\"unparsed\": cLine", 
    "\t\t\t\t});", 
    "\t\t\t}", 
    "\t\t}", 
    "\t\t", 
    "\t\treturn results;", 
    "\t}", 
    "\t", 
    "\tfunction _checkstyle(cFilePath){", 
    "\t\tvar projectPath = _getProjectPath();", 
    "\t\tvar cwd = projectPath+\".komodotools\\\\util\\\\checkstyle\";", 
    "\t\tcFilePath = cFilePath.replace(projectPath,\"\");", 
    "\t\tvar command = \"checkstyle files=\\\"..\\\\..\\\\..\\\\\"+cFilePath+\"\\\"\";", 
    "\t\t", 
    "\t\treturn runCommand(command, cwd, null, null);", 
    "\t}", 
    "\t\t", 
    "\tfunction _getCurrentFilePath(){", 
    "\t\t//  summary:", 
    "\t\t//      Get the path of the currently open file.", 
    "\t\t//  returns: string", 
    "", 
    "\t\ttry {", 
    "\t\t\treturn _getCurrentDocument(ko.views.manager.currentView).file.path;", 
    "\t\t} catch(e) {", 
    "\t\t\tconsole.log(\"Could not get current file path\", e);", 
    "\t\t\treturn false;", 
    "\t\t}", 
    "\t}", 
    "\t\t", 
    "\tfunction _getCurrentDocument(root){", 
    "\t\t// summary:", 
    "\t\t//      Get the document for the supplied object - compatibility method so", 
    "\t\t//      version 5 API and version 6 API can both be used.", 
    "\t\t// returns: object", 
    "\t\t", 
    "\t\tif ((root === null) || (root === undefined)) {", 
    "\t\t\treturn false;", 
    "\t\t}", 
    "\t\t", 
    "\t\ttry {", 
    "\t\t\tif (root.document) {", 
    "\t\t\t\treturn root.document;", 
    "\t\t\t} else {", 
    "\t\t\t\treturn root.koDoc;", 
    "\t\t\t}", 
    "\t\t} catch(e) {", 
    "\t\t\tconsole.log(\"Could not get current document\");", 
    "\t\t\treturn false;", 
    "\t\t}", 
    "\t}", 
    "\t\t", 
    "\tfunction _getCurrentDirectoryPath(){", 
    "\t\t//  summary:", 
    "\t\t//      Get the directory path of the currently open file.", 
    "\t\t//  returns: string", 
    "", 
    "\t\ttry {", 
    "\t\t\treturn _getCurrentDocument(ko.views.manager.currentView).file.dirName;", 
    "\t\t} catch(e) {", 
    "\t\t\tconsole.log(\"Could not get current directory path\");", 
    "\t\t\treturn false;", 
    "\t\t}", 
    "\t}", 
    "\t", 
    "\tfunction _getProjectPath(project) {", 
    "\t\t// summary:", 
    "\t\t//      Get the path of a project.", 
    "\t\t// project: object KomodoProject", 
    "\t\t//      The project to get the path of.", 
    "\t\t// returns: string", 
    "\t\t", 
    "\t\tif (project == undefined) {", 
    "\t\t\tproject = _getProject();", 
    "\t\t}", 
    "\t\t", 
    "\t\tif (project) {", 
    "\t\t\tvar projectFile = project.getFile();", 
    "\t\t\treturn projectFile.dirName;", 
    "\t\t} else {", 
    "\t\t\treturn '';", 
    "\t\t}", 
    "\t}", 
    "\t", 
    "\tfunction _getProject() {", 
    "\t\t//  summary:", 
    "\t\t//      Get the project, the current file is attached to (will assume first", 
    "\t\t//      which it find the current file in).", 
    "\t\t//  returns: Object KomodoProject", 
    "", 
    "\t\ttry {", 
    "\t\t\treturn ko.projects.manager.getCurrentProject();", 
    "\t\t} catch(e) {", 
    "\t\t\tconsole.log(\"Could not find a current project\");", 
    "\t\t\treturn false; ", 
    "\t\t}", 
    "\t};", 
    "\t", 
    "\tfunction runCommand(cmd,cwd,env,c_input) {", 
    "\t\t// summary:", 
    "\t\t//      Run a command-prompt-style command and grab the output.", 
    "\t\t// cmd: string", 
    "\t\t//      The command to run.", 
    "\t\t// cwd: string", 
    "\t\t//      The working directory to use.", 
    "\t\t// env: object|null", 
    "\t\t//      The env variables to use.", 
    "\t\t// c_input: object|null", 
    "\t\t//      The input object to use (STDIN).", 
    "\t\t// returns: object", 
    "\t\t//      The content returned by the command in the format:", 
    "\t\t//      { error: true|false, value: errorString|commadOutput }", 
    "\t\t", 
    "\t\tvar RunService = Components.classes[\"@activestate.com/koRunService;1\"].getService(Components.interfaces.koIRunService);", 
    "\t\tvar output = new Object();", 
    "\t\tvar error = new Object();", 
    "\t\t", 
    "\t\ttry {", 
    "\t\t\tvar process = RunService.RunAndCaptureOutput(cmd,cwd,env,c_input,output,error);", 
    "\t\t\tif (error.value != '') {", 
    "\t\t\t\treturn {error:true,value:error.value};", 
    "\t\t\t} else {", 
    "\t\t\t\treturn {error:false,value:output.value};", 
    "\t\t\t}", 
    "\t\t} catch(e) {", 
    "\t\t\treturn {error:true,value:e};", 
    "\t\t}", 
    "\t};", 
    "\t", 
    "\trun();", 
    "};", 
    "", 
    "org.simpo.dojoCheckStyle();"
  ], 
  "trigger": "trigger_postopen", 
  "rank": 100, 
  "version": "1.0.7", 
  "async": false, 
  "type": "macro"
}