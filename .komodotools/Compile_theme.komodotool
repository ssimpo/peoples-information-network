{
  "keyboard_shortcut": "", 
  "name": "Compile theme", 
  "language": "JavaScript", 
  "trigger_enabled": false, 
  "value": [
    "org.simpo.dojoCompileTheme = function(){", 
    "\tfunction run(){", 
    "\t\tvar projectPath = _getProjectPath();", 
    "\t\tvar cmd = \"node .komodotools/js/compileTheme.js \" + _getCurrentDirectoryPath();", 
    "\t\tcmd = cmd.replace(/\\\\/g,\"/\");", 
    "\t\tcmd = cmd.replace(/ [A-Za-z]\\:\\//,\" \");", 
    "\t\t", 
    "\t\tvar result = runCommand(cmd,projectPath,null,null);", 
    "\t\tif(result.error){", 
    "\t\t\tkonsole.writeln(\"ERROR:\\n\"+result.value, konsole.S_ERROR);", 
    "\t\t}else{", 
    "\t\t\tkonsole.writeln(\"LESS Compiled:\\n\"+result.value, konsole.S_OK);", 
    "\t\t}", 
    "\t\t", 
    "\t\t//S_DEFAULT", 
    "\t}", 
    "\t", 
    "\tfunction runCommand(cmd,cwd,env,c_input) {", 
    "\t\t// summary:", 
    "\t\t//      Run a command-prompt-style command and grab the output.", 
    "\t\t// cmd: string", 
    "\t\t//      The command to run.", 
    "\t\t// cwd: string", 
    "\t\t//      The working directory to use.", 
    "\t\t// env: object|null", 
    "\t\t//      The env variables to use.", 
    "\t\t// c_input: object|null", 
    "\t\t//      The input object to use (STDIN).", 
    "\t\t// returns: object", 
    "\t\t//      The content returned by the command in the format:", 
    "\t\t//      { error: true|false, value: errorString|commadOutput }", 
    "\t\t", 
    "\t\tvar RunService = Components.classes[\"@activestate.com/koRunService;1\"].getService(Components.interfaces.koIRunService);", 
    "\t\tvar output = new Object();", 
    "\t\tvar error = new Object();", 
    "\t\t", 
    "\t\ttry {", 
    "\t\t\tvar process = RunService.RunAndCaptureOutput(cmd,cwd,env,c_input,output,error);", 
    "\t\t\tif (error.value != '') {", 
    "\t\t\t\treturn {error:true,value:error.value};", 
    "\t\t\t} else {", 
    "\t\t\t\treturn {error:false,value:output.value};", 
    "\t\t\t}", 
    "\t\t} catch(e) {", 
    "\t\t\treturn {error:true,value:e};", 
    "\t\t}", 
    "\t};", 
    "\t", 
    "\tfunction _loadIncludes(){", 
    "\t\tvar projectPath = _getProjectPath();", 
    "\t\t", 
    "\t\txtk.load(\"file://\"+projectPath+\".komodotools\\\\js\\\\konsole.js\");", 
    "\t\txtk.load(\"file://\"+projectPath+\".komodotools\\\\js\\\\console.js\");", 
    "\t\tconsole.log(\"HELLO\");", 
    "\t}", 
    "\t", 
    "\tfunction _getProjectPath(project) {", 
    "\t\t// summary:", 
    "\t\t//      Get the path of a project.", 
    "\t\t// project: object KomodoProject", 
    "\t\t//      The project to get the path of.", 
    "\t\t// returns: string", 
    "\t\t", 
    "\t\tif (project == undefined) {", 
    "\t\t\tproject = _getProject();", 
    "\t\t}", 
    "\t\t", 
    "\t\tif (project) {", 
    "\t\t\tvar projectFile = project.getFile();", 
    "\t\t\treturn projectFile.dirName;", 
    "\t\t} else {", 
    "\t\t\treturn '';", 
    "\t\t}", 
    "\t}", 
    "\t", 
    "\tfunction _getProject() {", 
    "\t\t//  summary:", 
    "\t\t//      Get the project, the current file is attached to (will assume first", 
    "\t\t//      which it find the current file in).", 
    "\t\t//  returns: Object KomodoProject", 
    "", 
    "\t\ttry {", 
    "\t\t\treturn ko.projects.manager.getCurrentProject();", 
    "\t\t} catch(e) {", 
    "\t\t\tconsole.log(\"Could not find a current project\");", 
    "\t\t\treturn false; ", 
    "\t\t}", 
    "\t}", 
    "\t", 
    "\tfunction _getCurrentDirectoryPath(){", 
    "\t\t//  summary:", 
    "\t\t//      Get the directory path of the currently open file.", 
    "\t\t//  returns: string", 
    "", 
    "\t\ttry {", 
    "\t\t\treturn _getCurrentDocument(ko.views.manager.currentView).file.dirName;", 
    "\t\t} catch(e) {", 
    "\t\t\tconsole.log(\"Could not get current directory path\");", 
    "\t\t\treturn false;", 
    "\t\t}", 
    "\t}", 
    "\t", 
    "\tfunction _getCurrentDocument(root){", 
    "\t\t// summary:", 
    "\t\t//      Get the document for the supplied object - compatibility method so", 
    "\t\t//      version 5 API and version 6 API can both be used.", 
    "\t\t// returns: object", 
    "\t\t", 
    "\t\tif ((root === null) || (root === undefined)) {", 
    "\t\t\treturn false;", 
    "\t\t}", 
    "\t\t", 
    "\t\ttry {", 
    "\t\t\tif (root.document) {", 
    "\t\t\t\treturn root.document;", 
    "\t\t\t} else {", 
    "\t\t\t\treturn root.koDoc;", 
    "\t\t\t}", 
    "\t\t} catch(e) {", 
    "\t\t\tconsole.log(\"Could not get current document\");", 
    "\t\t\treturn false;", 
    "\t\t}", 
    "\t}", 
    "\t", 
    "\t_loadIncludes();", 
    "\trun();", 
    "};", 
    "", 
    "org.simpo.dojoCompileTheme();"
  ], 
  "trigger": "trigger_postopen", 
  "rank": 100, 
  "version": "1.0.7", 
  "async": false, 
  "type": "macro"
}